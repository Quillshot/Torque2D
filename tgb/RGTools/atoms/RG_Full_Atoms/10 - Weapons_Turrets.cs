//--- OBJECT WRITE BEGIN ---
new ScriptObject(full_10Weapons_Turrets_RotatingProjectileTurret) {
   canSaveDynamicFields = "1";
   class = "behaviorAtom";
      behaviorType = "10 - Weapons (Key/Joy/Con; Multibind)";
      description = "Make this object a turret that can rotate. (Note: Can be mounted to non-rotating objects, but remember to disable trackRotation.)";
      details_atomName = "RotatingProjectileTurret";
      details_category = "10 - Weapons";
      details_eventAction = "full";
      details_subCategory = "Turrets";
      friendlyName = "Rotating Turret (multi)";
      segmentbehaviorFields = "10";
      segmentbehaviorFields_0 = "   %behavior.addBehaviorField(enable, \"Enable this behavior.\", bool, true);";
      segmentbehaviorFields_1 = "   %behavior.addBehaviorField(debugMode, \"Enable debugging (output) for this behavior.\", bool, false);";
      segmentbehaviorFields_2 = "   %behavior.addBehaviorField( \"rotateRate\", \"Rotation rate in degrees.\", float, 90 );   ";
      segmentbehaviorFields_3 = "   %behavior.addBehaviorField( \"Left\",  \"Move Left\",  keybind, \"Keyboard A\" );";
      segmentbehaviorFields_4 = "   %behavior.addBehaviorField( \"Right\", \"Move Right\", keybind, \"Keyboard D\" );";
      segmentbehaviorFields_5 = "   %behavior.addBehaviorField( \"minAngle\", \"Minimum counterclockwise rotation angle.\", float, -85 );   ";
      segmentbehaviorFields_6 = "   %behavior.addBehaviorField( \"maxAngle\", \"Maximum clockwise rotation angle.\", float, 85 );   ";
      segmentbehaviorFields_7 = "   %behavior.addBehaviorField( \"projectile\", \"Datablock specifying projectile to fire when key is pressed.\", \"managedDB\", \"\");";
      segmentbehaviorFields_8 = "   %behavior.addBehaviorField( \"repeatRate\",  \"If greater than 0, the turret will fire this many projectiles per-second while the fire button is depressed.\", integer, 0 );";
      segmentbehaviorFields_9 = "   %behavior.addBehaviorField( \"muzzleOffset\", \"Offset to use for muzzle position\", \"point2f\" , \"0.0 -1.0\");";
      segmentkeepAll = "105";
      segmentkeepAll_0 = "function RotatingTurretmulti::onMoveLeft( %this , %val )";
      segmentkeepAll_1 = "{   ";
      segmentkeepAll_10 = "{   ";
      segmentkeepAll_100 = "         Rotation      = %rotation;";
      segmentkeepAll_101 = "         scenegraph    = %owner.scenegraph;";
      segmentkeepAll_102 = "      };   ";
      segmentkeepAll_103 = "   }";
      segmentkeepAll_104 = "}";
      segmentkeepAll_11 = "   if(%this.debugMode) echo(\"RotatingTurretmulti::onMoveRight( \", %val , \" ) \" );";
      segmentkeepAll_12 = "   %this.moveRight = %val;";
      segmentkeepAll_13 = "   if(!%val && %this.moveLeft) %val = -1; ";
      segmentkeepAll_14 = "   %this.inputX  = %val;";
      segmentkeepAll_15 = "   ";
      segmentkeepAll_16 = "   %this.doMove();";
      segmentkeepAll_17 = "}";
      segmentkeepAll_18 = "function RotatingTurretmulti::onMoveJoystickLeftRight( %this , %val )";
      segmentkeepAll_19 = "{   ";
      segmentkeepAll_2 = "   if(%this.debugMode) echo(\"RotatingTurretmulti::onMoveLeft( \", %val , \" ) \" );";
      segmentkeepAll_20 = "   if(%this.debugMode) echo(\"RotatingTurretmulti::onMoveJoystickLeftRight( \", %val , \" ) \" );";
      segmentkeepAll_21 = "   if( %val < 0 ) %this.inputX = %val;";
      segmentkeepAll_22 = "   else if (%val > 0) %this.inputX = %val;";
      segmentkeepAll_23 = "   else  %this.inputX = 0;";
      segmentkeepAll_24 = "   %this.doMove();";
      segmentkeepAll_25 = "}";
      segmentkeepAll_26 = "function RotatingTurretmulti::doMove( %this )";
      segmentkeepAll_27 = "{   ";
      segmentkeepAll_28 = "   // if using limited-rotation, rotate to the min or max angle";
      segmentkeepAll_29 = "   if( %this.inputX < 0 ) ";
      segmentkeepAll_3 = "   %this.moveLeft = %val;";
      segmentkeepAll_30 = "   {";
      segmentkeepAll_31 = "      %this.owner.rotateTo( %this.minAngle + %this.originalRotation, %this.rotateRate, true  ); ";
      segmentkeepAll_32 = "   }";
      segmentkeepAll_33 = "   else if ( %this.inputX > 0 ) ";
      segmentkeepAll_34 = "   {";
      segmentkeepAll_35 = "      %this.owner.rotateTo( %this.maxAngle + %this.originalRotation, %this.rotateRate, true  ); ";
      segmentkeepAll_36 = "   } ";
      segmentkeepAll_37 = "   else";
      segmentkeepAll_38 = "   {";
      segmentkeepAll_39 = "      %this.owner.setAngularVelocity( 0 );";
      segmentkeepAll_4 = "   if(!%val && %this.moveRight) %val = 1;";
      segmentkeepAll_40 = "   }";
      segmentkeepAll_41 = "}";
      segmentkeepAll_42 = "function RotatingTurretmulti::onFire( %this , %val )";
      segmentkeepAll_43 = "{ ";
      segmentkeepAll_44 = "   if(!%this.enable) return;  ";
      segmentkeepAll_45 = "   //error(\"RotatingTurretmulti::onFire( \", %val , \" ) \" );";
      segmentkeepAll_46 = "   if(%val > 0)";
      segmentkeepAll_47 = "   {   ";
      segmentkeepAll_48 = "      %this.isFiring++;";
      segmentkeepAll_49 = "   }";
      segmentkeepAll_5 = "   else %val = -%val; ";
      segmentkeepAll_50 = "   else";
      segmentkeepAll_51 = "   {";
      segmentkeepAll_52 = "      %this.isFiring--;";
      segmentkeepAll_53 = "   }";
      segmentkeepAll_54 = "   error(%this.isFiring);";
      segmentkeepAll_55 = "   ";
      segmentkeepAll_56 = "   // limit rate (if using repeat) and prevent multiple fire inputs from causing re-entrance";
      segmentkeepAll_57 = "   if( isEventPending(%this.lastSchedule) ) return;";
      segmentkeepAll_58 = "   if(%val) %this.doFire();";
      segmentkeepAll_59 = "}";
      segmentkeepAll_6 = "   %this.inputX  = %val;";
      segmentkeepAll_60 = "function RotatingTurretmulti::doFire( %this )";
      segmentkeepAll_61 = "{ ";
      segmentkeepAll_62 = "   error(\"RotatingTurretmulti::doFire( %this.isFiring == \", %this.isFiring , \" ) \" );";
      segmentkeepAll_63 = "   ";
      segmentkeepAll_64 = "   if(!%this.isFiring) return;";
      segmentkeepAll_65 = "   %this.createProjectile();";
      segmentkeepAll_66 = "   if(%this.repeatRate > 0 )";
      segmentkeepAll_67 = "   {";
      segmentkeepAll_68 = "      %period = ( (1000 / %this.repeatRate ) >= 1) ? 1000 / %this.repeatRate : 1;";
      segmentkeepAll_69 = "      ";
      segmentkeepAll_7 = "   %this.doMove();";
      segmentkeepAll_70 = "      %period = mFloatLength( %period, 0 );";
      segmentkeepAll_71 = "      ";
      segmentkeepAll_72 = "      %this.lastSchedule = %this.schedule( %period, doFire );";
      segmentkeepAll_73 = "   }";
      segmentkeepAll_74 = "}";
      segmentkeepAll_75 = "function RotatingTurretmulti::createProjectile( %this )";
      segmentkeepAll_76 = "{ ";
      segmentkeepAll_77 = "   error(\"RotatingTurretmulti::createProjectile( %this.isFiring == \", %this.isFiring , \" ) \" );";
      segmentkeepAll_78 = "   ";
      segmentkeepAll_79 = "   %owner = %this.owner; ";
      segmentkeepAll_8 = "}";
      segmentkeepAll_80 = "   ";
      segmentkeepAll_81 = "   %position = %owner.getWorldPoint(%this.muzzleOffset);";
      segmentkeepAll_82 = "   %rotation = %owner.getRotation();";
      segmentkeepAll_83 = "   ";
      segmentkeepAll_84 = "   if(%this.projectile.animationName $= \"\")";
      segmentkeepAll_85 = "   {";
      segmentkeepAll_86 = "      %bullet = new t2dStaticSprite( )      ";
      segmentkeepAll_87 = "      {";
      segmentkeepAll_88 = "         config   = %this.projectile;";
      segmentkeepAll_89 = "         Position = %position;";
      segmentkeepAll_9 = "function RotatingTurretmulti::onMoveRight( %this , %val )";
      segmentkeepAll_90 = "         Rotation = %rotation;";
      segmentkeepAll_91 = "         scenegraph = %owner.scenegraph;";
      segmentkeepAll_92 = "      };   ";
      segmentkeepAll_93 = "   }";
      segmentkeepAll_94 = "   else";
      segmentkeepAll_95 = "   {";
      segmentkeepAll_96 = "      %bullet = new t2dAnimatedSprite( )";
      segmentkeepAll_97 = "      {";
      segmentkeepAll_98 = "         config = %this.projectile;";
      segmentkeepAll_99 = "         Position      = %position;";
      segmentonAddToScene = "24";
      segmentonAddToScene_0 = "   if(!%this.enable) return;";
      segmentonAddToScene_1 = "   if(%this.debugMode) echo(%this.getName() @ \"::onAddToScene()\");";
      segmentonAddToScene_10 = "      // USING JOYSTICK BUTTONS OR KEYBOARD KEYS";
      segmentonAddToScene_11 = "      moveMap.bindMulti( getWord( %this.Left , 0 ),  getWord( %this.Left , 1 ),  %this, \"onMoveLeft\" );";
      segmentonAddToScene_12 = "      moveMap.bindMulti( getWord( %this.Right , 0 ), getWord( %this.Right , 1 ), %this, \"onMoveRight\" );";
      segmentonAddToScene_13 = "   }";
      segmentonAddToScene_14 = "   else";
      segmentonAddToScene_15 = "   {";
      segmentonAddToScene_16 = "      // USING JOYSTICK AXIS";
      segmentonAddToScene_17 = "      moveMap.bindMulti( getWord( %this.Left , 0 ), getWord( %this.Left , 1 ), %this, \"onMoveJoystickLeftRight\" );";
      segmentonAddToScene_18 = "   }";
      segmentonAddToScene_19 = "   %this.isFiring = 0;";
      segmentonAddToScene_2 = "   //Rotating Turret (multi)";
      segmentonAddToScene_20 = "   ";
      segmentonAddToScene_21 = "   %this.inputX = 0;";
      segmentonAddToScene_22 = "   %this.left   = 0;";
      segmentonAddToScene_23 = "   %this.right  = 0;";
      segmentonAddToScene_3 = "   // Capture original rotation as this must be accounted for while rotating";
      segmentonAddToScene_4 = "   // the turret barrel";
      segmentonAddToScene_5 = "   %this.originalRotation = %this.owner.getRotation();";
      segmentonAddToScene_6 = "   // Note: Do not use a joystick for only one part of a movement pair. ";
      segmentonAddToScene_7 = "   // Ex: If you use joystick yaxis for up, use it for down too.";
      segmentonAddToScene_8 = "   if( strstr( getWord( %this.Left , 1 ), \"axis\" ) == -1 )";
      segmentonAddToScene_9 = "   {";
      segmentonRemoveFromScene = "17";
      segmentonRemoveFromScene_0 = "   if(!%this.enable) return;";
      segmentonRemoveFromScene_1 = "   if(%this.debugMode) echo(%this.getName() @ \"::onRemoveFromScene()\");";
      segmentonRemoveFromScene_10 = "      moveMap.unbindMultiEvent( getWord( %this.Right , 0 ), getWord( %this.Right , 1 ), %this, \"onMoveRight\" );";
      segmentonRemoveFromScene_11 = "   }";
      segmentonRemoveFromScene_12 = "   else";
      segmentonRemoveFromScene_13 = "   {";
      segmentonRemoveFromScene_14 = "      // USING JOYSTICK AXIS";
      segmentonRemoveFromScene_15 = "      moveMap.unbindMultiEvent( getWord( %this.Left , 0 ), getWord( %this.Left , 1 ), %this, \"onMoveJoystickLeftRight\" );";
      segmentonRemoveFromScene_16 = "   }";
      segmentonRemoveFromScene_2 = "   //Rotating Turret (multi)";
      segmentonRemoveFromScene_3 = "   if(!isObject(moveMap)) return;";
      segmentonRemoveFromScene_4 = "   // Note: Do not use a joystick for only one part of a movement pair. ";
      segmentonRemoveFromScene_5 = "   // Ex: If you use joystick yaxis for up, use it for down too.";
      segmentonRemoveFromScene_6 = "   if( strstr( getWord( %this.Left , 1 ), \"axis\" ) == -1 )";
      segmentonRemoveFromScene_7 = "   {";
      segmentonRemoveFromScene_8 = "      // USING JOYSTICK BUTTONS OR KEYBOARD KEYS";
      segmentonRemoveFromScene_9 = "      moveMap.unbindMultiEvent( getWord( %this.Left , 0 ),  getWord( %this.Left , 1 ),  %this, \"onMoveLeft\" );";
      segments = "behaviorFields\tonAddToScene\tonRemoveFromScene\tkeepAll";
};
//--- OBJECT WRITE END ---
//--- OBJECT WRITE BEGIN ---
new ScriptObject(full_10Weapons_Turrets_FixedProjectileTurret) {
   canSaveDynamicFields = "1";
   class = "behaviorAtom";
      behaviorType = "10 - Weapons";
      description = "This acts like a turret and can fire (animated or static) projectiles.";
      details_atomName = "FixedProjectileTurret";
      details_category = "10 - Weapons";
      details_eventAction = "full";
      details_subCategory = "Turrets";
      friendlyName = "Fixed Projectile Turret";
      segmentbehaviorFields = "3";
      segmentbehaviorFields_0 = "   %behavior.addBehaviorField( \"projectile\", \"Datablock specifying projectile to fire when key is pressed.\", \"managedDB\", \"\");";
      segmentbehaviorFields_1 = "   %behavior.addBehaviorField( \"repeatRate\",  \"If greater than 0, the turret will fire this many projectiles per-second while the fire button is depressed.\", integer, 0 );";
      segmentbehaviorFields_2 = "   %behavior.addBehaviorField( \"muzzleOffset\", \"Offset to use for muzzle position\", \"point2f\" , \"0.0 -1.0\");";
      segmentkeepAll = "63";
      segmentkeepAll_0 = "function FixedProjectileTurret::onFire( %this , %val )";
      segmentkeepAll_1 = "{ ";
      segmentkeepAll_10 = "      %this.isFiring--;";
      segmentkeepAll_11 = "   }";
      segmentkeepAll_12 = "   error(%this.isFiring);";
      segmentkeepAll_13 = "   ";
      segmentkeepAll_14 = "   // limit rate (if using repeat) and prevent multiple fire inputs from causing re-entrance";
      segmentkeepAll_15 = "   if( isEventPending(%this.lastSchedule) ) return;";
      segmentkeepAll_16 = "   if(%val) %this.doFire();";
      segmentkeepAll_17 = "}";
      segmentkeepAll_18 = "function FixedProjectileTurret::doFire( %this )";
      segmentkeepAll_19 = "{ ";
      segmentkeepAll_2 = "   if(!%this.enable) return;  ";
      segmentkeepAll_20 = "   error(\"FixedProjectileTurret::doFire( %this.isFiring == \", %this.isFiring , \" ) \" );";
      segmentkeepAll_21 = "   ";
      segmentkeepAll_22 = "   if(!%this.isFiring) return;";
      segmentkeepAll_23 = "   %this.createProjectile();";
      segmentkeepAll_24 = "   if(%this.repeatRate > 0 )";
      segmentkeepAll_25 = "   {";
      segmentkeepAll_26 = "      %period = ( (1000 / %this.repeatRate ) >= 1) ? 1000 / %this.repeatRate : 1;";
      segmentkeepAll_27 = "      ";
      segmentkeepAll_28 = "      %period = mFloatLength( %period, 0 );";
      segmentkeepAll_29 = "      ";
      segmentkeepAll_3 = "   //error(\"FixedProjectileTurret::onFire( \", %val , \" ) \" );";
      segmentkeepAll_30 = "      %this.lastSchedule = %this.schedule( %period, doFire );";
      segmentkeepAll_31 = "   }";
      segmentkeepAll_32 = "}";
      segmentkeepAll_33 = "function FixedProjectileTurret::createProjectile( %this )";
      segmentkeepAll_34 = "{ ";
      segmentkeepAll_35 = "   error(\"FixedProjectileTurret::createProjectile( %this.isFiring == \", %this.isFiring , \" ) \" );";
      segmentkeepAll_36 = "   ";
      segmentkeepAll_37 = "   %owner = %this.owner; ";
      segmentkeepAll_38 = "   ";
      segmentkeepAll_39 = "   %position = %owner.getWorldPoint(%this.muzzleOffset);";
      segmentkeepAll_4 = "   if(%val > 0)";
      segmentkeepAll_40 = "   %rotation = %owner.getRotation();";
      segmentkeepAll_41 = "   ";
      segmentkeepAll_42 = "   if(%this.projectile.animationName $= \"\")";
      segmentkeepAll_43 = "   {";
      segmentkeepAll_44 = "      %bullet = new t2dStaticSprite( )      ";
      segmentkeepAll_45 = "      {";
      segmentkeepAll_46 = "         config   = %this.projectile;";
      segmentkeepAll_47 = "         Position = %position;";
      segmentkeepAll_48 = "         Rotation = %rotation;";
      segmentkeepAll_49 = "         scenegraph = %owner.scenegraph;";
      segmentkeepAll_5 = "   {   ";
      segmentkeepAll_50 = "      };   ";
      segmentkeepAll_51 = "   }";
      segmentkeepAll_52 = "   else";
      segmentkeepAll_53 = "   {";
      segmentkeepAll_54 = "      %bullet = new t2dAnimatedSprite( )";
      segmentkeepAll_55 = "      {";
      segmentkeepAll_56 = "         config = %this.projectile;";
      segmentkeepAll_57 = "         Position      = %position;";
      segmentkeepAll_58 = "         Rotation      = %rotation;";
      segmentkeepAll_59 = "         scenegraph    = %owner.scenegraph;";
      segmentkeepAll_6 = "      %this.isFiring++;";
      segmentkeepAll_60 = "      };   ";
      segmentkeepAll_61 = "   }";
      segmentkeepAll_62 = "}";
      segmentkeepAll_7 = "   }";
      segmentkeepAll_8 = "   else";
      segmentkeepAll_9 = "   {";
      segmentonAddToScene = "1";
      segmentonAddToScene_0 = "   %this.isFiring = 0;";
      segments = "behaviorFields\tonAddToScene\tkeepAll";
};
//--- OBJECT WRITE END ---
